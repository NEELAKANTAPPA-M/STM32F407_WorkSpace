/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include<stdint.h>
#include<stdio.h>
#include <main.h>
#include <type.h>
#include <led.h>
#include <task.h>

u8 current_task = 0;
TCB_st user_task[MAX_TASKS];

int main(void)
{
	enable_fault_handlers();
	init_scheduler_stack(SCHED_STACK_START);
	init_tasks_stack();
	led_init_all();
	init_systick_timer(TICK_HZ);
	switch_sp_to_psp();
	t1_handler();
	for(;;);
}

__attribute__((naked)) void switch_sp_to_psp(void)
{
	// get the psp of current task & store it to PSP register
	__asm__ volatile("PUSH {LR}"); // preserve LR which connects back to main()
	__asm__ volatile("BL get_psp_value");
	__asm__ volatile("MSR PSP, R0"); // store psp value from r0 to PSP register
	__asm__ volatile("POP {LR}"); // store back LR from stack

	//change sp to psp using CONTROL register
	__asm__ volatile("MOV R0,#0x02"); //
	__asm__ volatile("MSR CONTROL, R0");
	__asm__ volatile("BX LR");

}

u32 get_psp_value(void)
{
	return psp_of_tasks[current_task];
}
void save_psp_value(u32 current_psp_value)
{
	psp_of_tasks[current_task] = current_psp_value;
}

void t1_handler(void)
{
	while(1) {
		led_on(LED_GREEN);
		delay(DELAY_COUNT_1S);
		led_off(LED_GREEN);
		delay(DELAY_COUNT_1S);
	}
}
void t2_handler(void)
{
	while(1) {
		led_on(LED_ORANGE);
		delay(DELAY_COUNT_500MS);
		led_off(LED_ORANGE);
		delay(DELAY_COUNT_500MS);
	}
}
void t3_handler(void)
{
	while(1) {
		led_on(LED_BLUE);
		delay(DELAY_COUNT_250MS);
		led_off(LED_BLUE);
		delay(DELAY_COUNT_250MS);
	}
}
void t4_handler(void)
{
	while(1) {
		led_on(LED_RED);
		delay(DELAY_COUNT_125MS);
		led_off(LED_RED);
		delay(DELAY_COUNT_125MS);
	}
}

void init_tasks_stack()
{
	u32 i;
	u32 *pPSP;

	user_task[0].current_state = TASK_RUNNING_STATE;
	user_task[1].current_state = TASK_RUNNING_STATE;
	user_task[2].current_state = TASK_RUNNING_STATE;
	user_task[3].current_state = TASK_RUNNING_STATE;


	for(i = 0; i < MAX_TASKS; i++) {
		s32 j;
		pPSP =(u32 *) user_task[i].psp_value;
		pPSP--;
		*pPSP = DUMMY_XPSR; //xpsr
		pPSP--;
		*pPSP = user_task[i].task_handler; //PC
		pPSP--;
		*pPSP = 0xFFFFFFFD;//LR

		/* loop for 13 general purpose registers*/
		for(j = 0; j < 13; j++) {
			pPSP--;
			*pPSP = 0x0;
		}
		user_task[i].psp_value = (u32)pPSP;
	}
}

void init_systick_timer(u32 tick_hz)
{
	u32 *pCSR = (u32 *) SYST_CSR;
	u32 *pRVR = (u32 *) SYST_RVR;

	u32 cnt_val = (SYS_TICK_TIMER_CLK/tick_hz) - 1;

	*pRVR &= ~(0x00FFFFFF);
	*pRVR = cnt_val;

	*pCSR |= (1 << 1);
	*pCSR |= (1 << 2);

	*pCSR |= (1 << 0);
}

__attribute__((naked)) void init_scheduler_stack(u32 sched_stack_top)
{
	__asm__ volatile("MSR MSP, %0"::"r"(sched_stack_top):);
	__asm__ volatile("BX LR");
}

void enable_fault_handlers(void)
{
	// enable mem fault, usage fault,bus fault
	uint32_t *pSHCSR = (uint32_t *)SHCSR;
	*pSHCSR |= ((1<< MEMFAULTENA_POS) | (1 << BUSFAULTENA_POS)| (1 << USGFAULTENA_POS));
}

void HardFault_Handler()
{
	printf("Exception: HardFault_Handler \n");
	while(1);
}

void MemManage_Handler()
{
	printf("Exception: MemManage_Handler \n");
	while(1);
}

void BusFault_Handler()
{
	printf("Exception: BusFault_Handler \n");
	while(1);
}

void update_next_task(void)
{
	current_task++;
	current_task %= MAX_TASKS;
}
__attribute__((naked)) void SysTick_Handler(void)
{
	/* save the context of current task */

	// push the value of LR to stack
	__asm volatile("PUSH {LR}");

	// get the psp value
	__asm volatile("MRS R0, PSP");;

	// store sf2 to stack
	__asm volatile("STMDB R0!, {R4-R11}");

	// save psp value to global variable
	__asm volatile("BL save_psp_value");

	/* Switch to & Retrieve the context of next task*/

	//Decide next task to run
	__asm volatile("BL update_next_task");

	//get its past psp value
	__asm volatile("BL get_psp_value");

	// load back saved register values to GPRs
	__asm volatile("LDMIA R0!, {R4-R11}");

	//update psp & Exit
	__asm volatile("MSR PSP, R0");

	// pop the value of LR to stack
	__asm volatile("POP {LR}");

	__asm volatile("BX LR");
}
